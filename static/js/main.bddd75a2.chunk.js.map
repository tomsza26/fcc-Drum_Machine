{"version":3,"sources":["components/DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["Drumpad","handleKeyDown","e","keyCode","props","letter","charCodeAt","onOff","audio","play","currentTime","handleDisplay","id","handleClick","document","addEventListener","this","removeEventListener","className","onClick","src","ref","React","Component","data","App","onOffChecked","event","target","checked","setState","changevolume","amount","i","getElementsByTagName","volume","value","display","state","type","name","onChange","htmlFor","Math","round","max","min","step","map","d","DrumPad","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bddd75a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.scss';\r\n\r\nclass Drumpad extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\tdocument.addEventListener('keydown', this.handleKeyDown);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tdocument.removeEventListener('keydown', this.handleKeyDown);\r\n\t}\r\n\r\n\thandleKeyDown = (e) => {\r\n\t\tif (e.keyCode === this.props.letter.charCodeAt() && this.props.onOff) {\r\n\t\t\tthis.audio.play();\r\n\t\t\tthis.audio.currentTime = 0;\r\n\t\t\tthis.props.handleDisplay(this.props.id);\r\n\t\t}\r\n\t};\r\n\r\n\thandleClick = () => {\r\n\t\tthis.audio.play();\r\n\t\tthis.audio.currentTime = 0;\r\n\t\tthis.props.handleDisplay(this.props.id);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"drum-pad\" onClick={this.props.onOff ? this.handleClick : function() {}} id={this.props.id}>\r\n\t\t\t\t<h1>{this.props.letter}</h1>\r\n\t\t\t\t<audio id={this.props.letter} className=\"clip\" src={this.props.src} ref={(ref) => (this.audio = ref)} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Drumpad;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.scss';\r\nimport DrumPad from './components/DrumPad';\r\n\r\nconst data = [\r\n\t{ id: 'heater-1', letter: 'Q', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3' },\r\n\t{ id: 'heater-2', letter: 'W', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3' },\r\n\t{ id: 'heater-3', letter: 'E', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3' },\r\n\t{ id: 'heater-4_1', letter: 'A', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3' },\r\n\t{ id: 'heater-6', letter: 'S', src: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3' },\r\n\t{ id: 'dsc_oh', letter: 'D', src: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3' },\r\n\t{ id: 'kick_n_hat', letter: 'Z', src: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3' },\r\n\t{ id: 'rp4_kick_1', letter: 'X', src: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3' },\r\n\t{ id: 'cev_h2', letter: 'C', src: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3' }\r\n];\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tdisplay: 'play',\r\n\t\t\tvolume: 1,\r\n\t\t\tonOff: true\r\n\t\t};\r\n\t}\r\n\r\n\tonOffChecked = (event) => {\r\n\t\tif (event.target.checked) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tonOff: false\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tonOff: true\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tchangevolume = (amount) => {\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet audioobject = document.getElementsByTagName('audio')[i];\r\n\t\t\taudioobject.volume = amount.target.value;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tvolume: amount.target.value\r\n\t\t});\r\n\t};\r\n\r\n\thandleDisplay = (display) => this.setState({ display });\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"drum-machine\">\r\n\t\t\t\t<div id=\"display\">{this.state.display}</div>\r\n\t\t\t\t<div id=\"settings\">\r\n\t\t\t\t\t<div id=\"onOffLabel\">\r\n\t\t\t\t\t\t<div className=\"onoffswitch\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\t\t\tname=\"onoffswitch\"\r\n\t\t\t\t\t\t\t\tclassName=\"onoffswitch-checkbox\"\r\n\t\t\t\t\t\t\t\tid=\"myonoffswitch\"\r\n\t\t\t\t\t\t\t\tonChange={this.onOffChecked}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<label className=\"onoffswitch-label\" htmlFor=\"myonoffswitch\">\r\n\t\t\t\t\t\t\t\t<span className=\"onoffswitch-inner\" />\r\n\t\t\t\t\t\t\t\t<span className=\"onoffswitch-switch\" />\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"volPower\">\r\n\t\t\t\t\t\tVOLUME: <span>{Math.round(this.state.volume * 100)}%</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id=\"volumeLabel\">\r\n\t\t\t\t\t\t<input type=\"range\" id=\"slider\" max=\"1\" min=\"0\" step=\"0.01\" onChange={this.changevolume} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"drum-pads\">\r\n\t\t\t\t\t{data.map((d) => (\r\n\t\t\t\t\t\t<DrumPad\r\n\t\t\t\t\t\t\tkey={d.id}\r\n\t\t\t\t\t\t\tid={d.id}\r\n\t\t\t\t\t\t\tsrc={d.src}\r\n\t\t\t\t\t\t\tletter={d.letter}\r\n\t\t\t\t\t\t\thandleDisplay={this.handleDisplay}\r\n\t\t\t\t\t\t\t{...this.state}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}